# a solution to problem 29 of project euler
# http://projecteuler.net/problem=29
# How many distinct terms are in the sequence generated by a^b for 2<=a<=100 and 2<=b<=100?

# create a map of all numbers between 2 and 100 that are powers of a smaller number
# key = a number that is a power of a smaller number
# value = exponent of the smaller number that evaluates to the current number
numberToLogMap = {}
for base in range(2,11):    # we know that 10^2 is the last power that is <= 100
    exponent = 2
    product = base ** exponent
    while product <= 100:
        if not product in numberToLogMap:   # only add the lowest possible base
            numberToLogMap[product] = (base, exponent)
        exponent += 1
        product = base ** exponent

# map to keep track of all unique factorizations seen till now
factorizationMap = {}
numDistinctPowers = 0   # initialize return value
for base in range(2,101):
    if not base in numberToLogMap:
        numDistinctPowers += 99
        for exponent in range(2,101):
            factorizationMap[(base, exponent)] = 1
    else:
        (smallBase, smallExponent) = numberToLogMap[base]
        for exponent in range(2,101):
            exponentForSmallBase = exponent * smallExponent
            if not (smallBase, exponentForSmallBase) in factorizationMap:
                factorizationMap[(smallBase, exponentForSmallBase)] = 1
                numDistinctPowers += 1

print "Number of distinct powers are ", numDistinctPowers
